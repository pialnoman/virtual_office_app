{"version":3,"sources":["pages/completed-project-details-view/CompletedProjectDetails.js"],"names":["CompletedDetailsView","work_package_number","useParams","_useState","useLocation","useState","_useState2","_slicedToArray","project","setProject","history","useDispatch","useHistory","useEffect","API","get","then","res","statusText","push","data","console","log","fileName","xlData","_jsx","_Fragment","children","undefined","_jsxs","CContainer","className","CButton","onClick","_loop","item","subtasks","i","sub_task","assigneNames","Array","from","assignees","map","el","assignee","first_name","last_name","assigneName","join","task_delivery_order","title","work_package_index","pm","task_title","estimated_person","planned_value","planned_hours","planned_delivery_date","length","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","exportToCSV","CIcon","name","IconButton","disabled","size","color","GradeIcon","fontSize","subtask","idx","CCard","CCardBody","Number","parseFloat","toFixed","remaining_hours"],"mappings":"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","file":"static/js/37.41c86094.chunk.js","sourcesContent":["import { CCardBody, CCard, CButton, CBadge, CContainer } from \"@coreui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport GradeIcon from \"@material-ui/icons/Grade\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport \"../ongoing-project-details-view/OngoingProjectDetailsView.css\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch } from 'react-redux'\r\nimport { API, BASE_URL, USER_ID } from '../../Config';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\nconst CompletedDetailsView = () => {\r\n  const { work_package_number } = useParams();\r\n  const location = useLocation();\r\n\r\n  const [project, setProject] = useState();\r\n  const dispatch = useDispatch()\r\n  let history = useHistory();\r\n\r\n\r\n \r\n  // console.log('project from completed page', project)\r\n\r\n  useEffect(() => {\r\n    API.get(\"project/details/\"+ work_package_number +\"/\").then((res) => {\r\n      if(res.statusText != 'OK'){\r\n        history.push('/dashboard/Projects/completed-projects')\r\n    }\r\n    else{\r\n      setProject(res.data.data);\r\n    }\r\n    \r\n  \r\n  \r\n    });\r\n    console.log('project from completed page', project)\r\n  }, [project])\r\n   {/**export in excel */ }\r\n   const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n   const fileExtension = '.xlsx';\r\n   var fileName;\r\n   const xlData = [];\r\n  const exportToCSV = () => {\r\n      for (let i = 0; i < project.subtasks.length; i++) {\r\n\r\n\r\n          const item = project.subtasks[i];\r\n          fileName='Details of'+' '+item.sub_task;\r\n       \r\n          let assigneNames = [];\r\n          var assigneName;\r\n          Array.from(item.assignees).map((el) => {\r\n              assigneNames.push(el.assignee.first_name + ' ' + el.assignee.last_name)\r\n          })\r\n          assigneName = assigneNames.join(\",\");\r\n\r\n          xlData.push({'Sl. No': i+1,'TDO':item.task_delivery_order.title,'Project Name':item.sub_task,'Work Package Number':item.work_package_number,'Work Package Index':item.work_package_index,'Project Manager':item.pm.first_name+''+item.pm.last_name,'Task Title':item.task_title,'Estimated Persons':item.estimated_person,'Planned Value':project.project.planned_value,'Planned Hours':project.project.planned_hours,'Planned Delivery Date':project.project.planned_delivery_date,'Assignee(s)':assigneName})\r\n         \r\n      }\r\n      const ws = XLSX.utils.json_to_sheet(xlData);\r\n      const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n      const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n      const data = new Blob([excelBuffer], { type: fileType });\r\n      FileSaver.saveAs(data, fileName + fileExtension);\r\n  }\r\n  return (\r\n    <>\r\n      {project != undefined &&\r\n        <CContainer>\r\n          <h3 className=\"dash-header-1\">Project Details <CButton className=\"export-project-list\" onClick={() => exportToCSV()}><CIcon name=\"cil-spreadsheet\" className=\"mr-2\"/>Export to excel</CButton></h3>\r\n          <div className=\"card-header-portion-ongoing\">\r\n            <h4 className=\"ongoing-card-header-1\">\r\n              <IconButton\r\n                aria-label=\"favourite\"\r\n                disabled\r\n                size=\"medium\"\r\n                color=\"primary\"\r\n              >\r\n                <GradeIcon fontSize=\"inherit\" className=\"fav-button\" />\r\n              </IconButton>\r\n              {project.project.task_delivery_order.title}\r\n            </h4>\r\n          </div>\r\n          {/**card show */}\r\n          <hr className=\"header-underline1\" />\r\n          {/**Details card */}\r\n          <div className=\"row\">\r\n            <div className=\"col-md-11 col-sm-12 col-xs-12 mt-1 mb-2\">\r\n            {Array.from(project.subtasks).map((subtask, idx) => (\r\n              <CCard className=\"card-ongoing-project\" key={idx}>\r\n                <CCardBody className=\"details-project-body\">\r\n                  {/*task percentage portion */}\r\n                  <div className=\"ongoing-initial-info row\">\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">Sub Task Name</h6>\r\n                      <h6 className=\"project-point-details\">{project.project.sub_task}</h6>\r\n                    </div>\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">PM Name</h6>\r\n                      <h6 className=\"project-point-details\">{project.project.pm.first_name + ' ' + project.project.pm.last_name} </h6>\r\n                    </div>\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">Work Package Number</h6>\r\n                      <h6 className=\"project-point-details\">{project.project.work_package_number}</h6>\r\n                    </div>\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">Work Package Index</h6>\r\n                      <h6 className=\"project-point-details\">{project.project.work_package_index}</h6>\r\n                    </div>\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">Task Title</h6>\r\n                      <h6 className=\"project-point-details\">\r\n                      {subtask.task_title}\r\n                      </h6>\r\n                    </div>\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">Estimated Person(s)</h6>\r\n                      <h6 className=\"project-point-details\">\r\n                      {subtask.estimated_person}\r\n                      </h6>\r\n                    </div>\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">Planned Value</h6>\r\n                      <h6 className=\"project-point-details\">{Number(parseFloat(project.project.planned_value)).toFixed(2)} </h6>\r\n                    </div>\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">Planned Hours</h6>\r\n                      <h6 className=\"project-point-details\">{Number(parseFloat(project.project.planned_hours)).toFixed(2)}</h6>\r\n                    </div>\r\n                    <div className=\"tasks-done-2 col-lg-4\">\r\n                      <h6 className=\"tiny-header2\">Remaining Hours</h6>\r\n                      <h6 className=\"project-point-details\">{Number(parseFloat(project.project.remaining_hours)).toFixed(2)}</h6>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/**assignees */}\r\n                  <div className=\"col-md-12 mt-4 mb-2\">\r\n                    <h5 className=\"projectName mb-3\">Asssignee(s)-({Array.from(project.assignees).length})</h5>\r\n                    <div className=\"file-show-ongoing-details row\">\r\n                      {project != undefined && Array.from(project.assignees).map((item, idx) => (\r\n                        <div className=\"col-md-6 col-sm-6 col-lg-2\" key={idx}>\r\n                          <div className=\"file-attached-ongoing rounded-pill\">\r\n                            {item.first_name + ' ' + item.last_name}\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </CCardBody>\r\n              </CCard>\r\n            ))}\r\n            </div>\r\n          </div>\r\n        </CContainer>}\r\n    </>\r\n  );\r\n};\r\nexport default CompletedDetailsView;\r\n"],"sourceRoot":""}