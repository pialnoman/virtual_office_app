{"version":3,"sources":["pages/completed-project/completedProject.js","components/linear-progress-bar/linear-progress-bar.js"],"names":["CompleteProjects","historyTo","useHistory","projects","useSelector","state","data","filter","project","status","_useState","useState","_useState2","_slicedToArray","show_sub_task_details","setShowSubTaskDetails","_useState3","_useState4","selectedSubTask","setSelectedSubTask","calculate_progress_in_percentage","total_hours","remaining_hours","parseFloat","xlData","_jsxs","_Fragment","children","CModal","closeOnBackdrop","size","alignment","show","onClose","_jsx","CModalHeader","closeButton","CModalTitle","className","CModalBody","CContainer","CForm","CRow","IconButton","disabled","color","GradeIcon","fontSize","undefined","task_delivery_order","title","CCard","CCardBody","task_title","pm","first_name","last_name","work_package_number","estimated_person","Number","assignees","planned_value","toFixed","planned_hours","Array","from","length","map","item","idx","assignee","CButton","onClick","_loop","i","subTaskNames","subtasks","el","push","subTaskName","join","assigneNames","assigneName","work_package_index","sub_task","planned_delivery_date","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","fileName","exportToCSV","CIcon","name","Accordion","allowMultipleExpanded","allowZeroExpanded","AccordionItem","AccordionItemHeading","AccordionItemButton","String","toUpperCase","pathname","AccordionItemPanel","remaining","total","parseInt","LinearWithValueLabel","progress","task","console","log","src","profile_pic","BASE_URL","date_created","CAlert","LinearProgressWithLabel","props","Box","sx","display","alignItems","width","mr","LinearProgress","_objectSpread","variant","minWidth","Typography","concat","Math","round","value","_React$useState","React","_React$useState2"],"mappings":"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","file":"static/js/34.f56df1f8.chunk.js","sourcesContent":["import { CCard, CModalTitle, CCardBody, CButton, CModal, CModalHeader, CModalBody, CContainer, CForm, CRow, CAlert } from '@coreui/react';\r\nimport GradeIcon from '@material-ui/icons/Grade';\r\nimport '../ongoing-project-details/ongoingProjectDetails.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState } from 'react';\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { BASE_URL } from '../../Config';\r\nimport '../my-projects/myProjects.css';\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\nimport SubTaskDetailsModal from '../../components/subtask-details-modal/SubTaskDetailsModal';\r\nimport LinearWithValueLabel from '../../components/linear-progress-bar/linear-progress-bar';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\nconst CompleteProjects = () => {\r\n    let historyTo = useHistory();\r\n    const projects = useSelector(state => state.projects.data.filter((project) => project.project.status === 1))\r\n    const remaining_hours = (remaining, total) => {\r\n        return String(parseFloat(total) - parseFloat(remaining))\r\n    }\r\n    const [show_sub_task_details, setShowSubTaskDetails] = useState(false)\r\n    const [selectedSubTask, setSelectedSubTask] = useState()\r\n    function calculate_progress_in_percentage(total_hours, remaining_hours) {\r\n        let worked_hours = parseFloat(total_hours) - parseFloat(remaining_hours)\r\n        return (100 * worked_hours) / parseFloat(total_hours)\r\n    }\r\n     {/**export in excel */ }\r\n     const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n     const fileExtension = '.xlsx';\r\n     const fileName = 'Completed project(s) List';\r\n     const xlData = [];\r\n     const exportToCSV = () => {\r\n         for (let i = 0; i < projects.length; i++) {\r\n \r\n \r\n             const item = projects[i];\r\n             let subTaskNames = [];\r\n             var subTaskName;\r\n             Array.from(item.subtasks).map((el) => {\r\n                 subTaskNames.push(el.task_title)\r\n             })\r\n             subTaskName = subTaskNames.join(\",\");\r\n             let assigneNames = [];\r\n             var assigneName;\r\n             Array.from(item.assignees).map((el) => {\r\n                 assigneNames.push(el.first_name + ' ' + el.last_name)\r\n             })\r\n             assigneName = assigneNames.join(\",\");\r\n             xlData.push({ 'Sl. No': i + 1, 'TDO': item.project.task_delivery_order.title, 'Work Package Number': item.project.work_package_number, 'Work Package Index': item.project.work_package_index, 'Project Name': item.project.sub_task, 'Subtasks': subTaskName, 'Assignee(s)': assigneName, 'Planned Value': item.project.planned_value, 'Planned Hours': item.project.planned_hours, 'Planned Delivery Date': item.project.planned_delivery_date })\r\n         }\r\n         const ws = XLSX.utils.json_to_sheet(xlData);\r\n         const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n         const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n         const data = new Blob([excelBuffer], { type: fileType });\r\n         FileSaver.saveAs(data, fileName + fileExtension);\r\n     }\r\n \r\n    return (\r\n        <>\r\n            {selectedSubTask && <CModal closeOnBackdrop={false} size=\"lg\" alignment=\"center\" show={show_sub_task_details} onClose={() => { setShowSubTaskDetails(!show_sub_task_details) }}>\r\n                <CModalHeader onClose={() => setShowSubTaskDetails(!show_sub_task_details)} closeButton>\r\n                    <CModalTitle className=\"modal-title-projects\">\r\n                        <span className=\"edit-profile-form-header\">Subtask Details</span>\r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CContainer>\r\n                        <CForm>\r\n                            <CRow>\r\n                                <div className=\"card-header-portion-ongoing\">\r\n                                    <h4 className=\"ongoing-card-header-1\">\r\n                                        <IconButton aria-label=\"favourite\" disabled size=\"medium\" color=\"primary\">\r\n                                            <GradeIcon fontSize=\"inherit\" className=\"fav-button\" />\r\n                                        </IconButton>\r\n                                        {selectedSubTask != undefined ? selectedSubTask.task_delivery_order.title : ''}\r\n                                    </h4>\r\n\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <div className=\"col-md-12 col-sm-12 col-xs-12 col-lg-12 mt-1 mb-2\">\r\n                                        <CCard className=\"card-ongoing-project\">\r\n                                            <CCardBody className=\"details-project-body\">\r\n                                                <div className=\"ongoing-initial-info row\">\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Sub Task Name</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.task_title}</h6></div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">PM Name</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.pm.first_name + ' ' + selectedSubTask.pm.last_name}</h6></div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Work Package Number</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.work_package_number}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Task Title</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.task_title}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Estimated Person(s)</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.estimated_person}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Planned Value</h6>\r\n                                                        <h6 className=\"project-point-details\">{Number(parseFloat(selectedSubTask.assignees[0].project.planned_value)).toFixed(2)} </h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Planned Hours</h6>\r\n                                                        <h6 className=\"project-point-details\">{Number(parseFloat(selectedSubTask.assignees[0].project.planned_hours)).toFixed(2)} </h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Remaining Hours</h6>\r\n                                                        <h6 className=\"project-point-details\">{Number(parseFloat(selectedSubTask.remaining_hours)).toFixed(2)} </h6>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className=\"col-md-12 mt-4 mb-2\">\r\n                                                    <h5 className=\"projectName mb-3\">Asssignee(s)-({Array.from(selectedSubTask.assignees).length})</h5>\r\n                                                    <div className=\"file-show-ongoing-details row\">\r\n                                                        {selectedSubTask != undefined && Array.from(selectedSubTask.assignees).map((item, idx) => (\r\n                                                            <div key={idx} className=\"col-md-4 col-sm-6 col-lg-4\">\r\n                                                                <div className=\"file-attached-ongoing rounded-pill\">\r\n                                                                    {item.assignee.first_name + ' ' + item.assignee.last_name}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        ))}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </div>\r\n                                </div>\r\n                            </CRow>\r\n                        </CForm>\r\n                    </CContainer>\r\n                </CModalBody>\r\n            </CModal>}\r\n            {/* <SubTaskDetailsModal show={show_sub_task_details} onPressClose={setShowSubTaskDetails} selectedSubTask={selectedSubTask}/> */}\r\n            <div className=\"container\">\r\n               \r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-11 col-sm-12 col-xs-12 mt-1\">\r\n                    <h3 className=\"dash-header\">Completed Projects({projects.length}) <CButton className=\"export-project-list\" onClick={() => exportToCSV()}><CIcon name=\"cil-spreadsheet\" className=\"mr-2\"/>Export to excel</CButton></h3>\r\n                        {projects != undefined && <Accordion allowMultipleExpanded={false} className=\"remove-acc-bg\" allowZeroExpanded>\r\n                            {projects.map((project, idx) => (\r\n                                <AccordionItem key={idx} className=\"card-ongoing-project\">\r\n                                    <AccordionItemHeading className=\"ongoing-accordion-header\">\r\n                                        <AccordionItemButton>\r\n                                            <IconButton aria-label=\"favourite\" disabled size=\"medium\" >\r\n                                                <GradeIcon fontSize=\"inherit\" className=\"fav-button\" />\r\n\r\n                                            </IconButton>{String(project.project.sub_task).toUpperCase()}\r\n\r\n                                            <span className=\"fix-action-btn-alignment\">\r\n                                            <CButton className=\"view-ongoing-details\" onClick={() => historyTo.push({ pathname: '/dashboard/Projects/completed-projects/details/' + project.project.work_package_number, state: { project: project } })}><CIcon name=\"cil-list-rich\" className=\"mr-1\" />View Details</CButton>\r\n                                            </span>\r\n                                        </AccordionItemButton>\r\n                                    </AccordionItemHeading>\r\n                                    <AccordionItemPanel>\r\n                                        {/*task percentage portion */}\r\n                                        <div>\r\n                                            <h6 className=\"show-amount\">{remaining_hours(project.project.remaining_hours, project.project.planned_hours)}/{parseInt(project.project.planned_hours)} Hrs</h6>\r\n                                            <LinearWithValueLabel progress={calculate_progress_in_percentage(project.project.planned_hours, project.project.remaining_hours)} />\r\n                                        </div>\r\n\r\n                                        {/*Project category buttons */}\r\n                                        <div className=\"all-da-buttons-1\">\r\n                                            {Array.from(project.subtasks).length > 0 && Array.from(project.subtasks).map((task, idx) => (\r\n                                                <CButton className=\"package-button rounded-pill\" type=\"button\" onClick={() => { setShowSubTaskDetails(true); setSelectedSubTask(task); console.log('task', task) }}>\r\n                                                    {task.task_title}\r\n                                                    <span className=\"tooltiptext\">{task.work_package_index}</span>\r\n                                                </CButton>\r\n                                            ))}\r\n                                        </div>\r\n                                        {/*Project participants */}\r\n                                        <div className=\"all-da-workers1\">\r\n                                            {project.assignees.length > 0 && Array.from(project.assignees).map((assignee, idx) => (\r\n                                                <img className=\"img-fluid worker-image\" src={assignee.profile_pic != null ? BASE_URL + assignee.profile_pic : 'avatars/user-avatar-default.png'} />\r\n                                            ))}\r\n                                        </div>\r\n                                        {/*project info in text */}\r\n                                        <div className=\"information-show row\">\r\n                                            <div className=\"info-show-now col-md-6\">\r\n                                                <h5 className=\"project-details-points child\"><h5 className=\"info-header-1\">Assigned by :</h5>{project.project.pm.first_name + ' ' + project.project.pm.last_name}</h5>\r\n                                                <h5 className=\"project-details-points\"><h5 className=\"info-header-1\">Project Manager : </h5>{project.project.pm.first_name + ' ' + project.project.pm.last_name}</h5>\r\n                                            </div>\r\n                                            <div className=\"info-show-now col-md-6\">\r\n                                                <h5 className=\"project-details-points child\"><h5 className=\"info-header-1\">Start Date : </h5>{project.project.date_created}</h5>\r\n\r\n                                                <h5 className=\"project-details-points\"><h5 className=\"info-header-1\">Planned Delivery Date : </h5>{project.project.planned_delivery_date}</h5>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </AccordionItemPanel>\r\n                                </AccordionItem>\r\n                            ))}\r\n\r\n                        </Accordion>\r\n                        }\r\n\r\n                        \r\n                        {/**If no projects are there */}\r\n                        {projects == '' ? (\r\n\r\n\r\n\r\n                            <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no completed projects</CAlert>\r\n\r\n\r\n                        ) : null\r\n\r\n\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default CompleteProjects;","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n      <Box sx={{ width: '100%', mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function LinearWithValueLabel(props) {\r\n  const [progress, setProgress] = React.useState(props.progress);\r\n  \r\n  React.useEffect(() => {\r\n    // const timer = setInterval(() => {\r\n    //   setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 10));\r\n    // }, 800);\r\n    // return () => {\r\n    //   clearInterval(timer);\r\n    // };\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <LinearProgressWithLabel value={progress} />\r\n    </Box>\r\n  );\r\n}"],"sourceRoot":""}