{"version":3,"sources":["pages/create-evms/createEVMS.js"],"names":["ProjectEVMS","history","useHistory","colourStyles","option","provided","state","_objectSpread","fontSize","projects","useSelector","e","Array","from","pm_projects","forEach","item","idx","push","data","console","log","evmsList","f","uniqueProjects","filter","o1","some","o2","project","id","uniqueArray","value","label","task_delivery_order","title","sub_task","useDispatch","React","useEffect","window","scrollTo","_useState","useState","_useState2","_slicedToArray","projectValue","setProjectValue","reset_form","formCreateEVMS","resetForm","create_evms","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","JSON","stringify","values","API","post","then","res","status","success","swal","stop","apply","arguments","useFormik","initialValues","work_package_number","earned_value","actual_cost","estimate_at_completion","estimate_to_completion","planned_value","planned_hours","variance_at_completion","budget_at_completion","validateOnChange","validateOnBlur","validate","errors","onSubmit","_jsx","_Fragment","children","CContainer","_jsxs","CRow","length","className","CCard","CCardHeader","CForm","CLabel","htmlFor","Select","closeMenuOnSelect","placeholder","isClearable","isMulti","onChange","setValues","classNamePrefix","options","styles","undefined","CAlert","color","estimated_person","planned_delivery_date","CInput","name","type","min","step","handleChange","required","readOnly","Math","abs","setFieldValue","target","CButton","onClick","handleSubmit","variant","pathname"],"mappings":"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","file":"static/js/43.22f332da.chunk.js","sourcesContent":["import {\r\n  CCard,\r\n  CContainer,\r\n  CRow,\r\n  CCardHeader,\r\n  CForm,\r\n  CLabel,\r\n  CInput,\r\n  CButton,\r\n  CAlert\r\n} from \"@coreui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { BASE_URL } from '../../Config';\r\nimport React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport \"../createProject/createProject.css\";\r\nimport { fetchProjectsThunk, fetchProjectsForPMThunk, fetchProjectsAssigneeThunk, fetchWbsThunk } from '../../store/slices/ProjectsSlice';\r\nimport { fetchEvmsThunk } from \"../../store/slices/EvmsSlice\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useFormik } from 'formik';\r\nimport { API, USER_ID } from '../../Config';\r\nimport swal from 'sweetalert'\r\nconst ProjectEVMS = () => {\r\n  let history = useHistory();\r\n  const colourStyles = {\r\n    // control: (styles, state) => ({ ...styles,height:\"35px\", fontSize: '14px !important', lineHeight: '1.42857', borderRadius: \"8px\",borderRadius:\".25rem\",color:\"rgb(133,133,133)\",border:state.isFocused ? '2px solid #0065ff' :'inherit'}),\r\n    option: (provided, state) => ({ ...provided, fontSize: \"14px !important\" }),\r\n  };\r\n  const projects = useSelector(state => {\r\n    let e = []\r\n    Array.from(state.projects.pm_projects).forEach((item, idx) => {\r\n      // e.push({ value: item.project.id, label: item.project.task_delivery_order.title + '/' + item.project.sub_task, data: item })\r\n      e.push({ data: item })\r\n    })\r\n    console.log('e', e);\r\n    return e\r\n\r\n  })\r\n\r\n  console.log(\"pM projects\", projects);\r\n\r\n  const evmsList = useSelector(state => {\r\n    let f = []\r\n    Array.from(state.evmsList.data).forEach((item, idx) => {\r\n      f.push({ data: item })\r\n    })\r\n    return f\r\n\r\n  })\r\n\r\n  console.log('existing evms', evmsList)\r\n  {/**get only the unique values */ }\r\n  // const uniqueProjects = projects.filter(function(o1){\r\n  //   return !evmsList.some(function(o2){\r\n  //     return o1.project.id === o2.project.id\r\n  //   })\r\n\r\n  // })\r\n  const uniqueProjects = projects.filter(o1 => !evmsList.some(o2 => o1.data.project.id === o2.data.project.id));\r\n  console.log('unique projects', uniqueProjects)\r\n  const uniqueArray = [];\r\n  Array.from(uniqueProjects).forEach((item, idx) => {\r\n    uniqueArray.push({ value:item.data.project.id, label: item.data.project.task_delivery_order.title + '/' + item.data.project.sub_task, data: item })\r\n\r\n  })\r\n  console.log('uniqueArray', uniqueArray)\r\n\r\n\r\n\r\n  const dispatch = useDispatch();\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    console.log('pm project list', projects)\r\n  }, [projects])\r\n\r\n\r\n\r\n\r\n  // const handleChange = (field, value) => {\r\n  //   switch (field) {\r\n  //     case \"projects\":\r\n\r\n  //       setProjectValue(value);\r\n\r\n\r\n  //       break;\r\n  //     case \"workPackage\":\r\n  //       setPackageValue(value);\r\n  //       break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  // };\r\n  const [projectValue, setProjectValue] = useState();\r\n\r\n\r\n  const getAssigneeList = (option) => {\r\n\r\n    // dispatch(fetchProjectsAssigneeThunk(option.data.project.work_package_number))\r\n    setProjectValue(option)\r\n\r\n    console.log('projectValue', option)\r\n    formCreateEVMS.setValues({\r\n      project: option.value,\r\n      planned_hours: option.data.data.project.planned_hours,\r\n      planned_value: option.data.data.project.planned_value,\r\n      work_package_number: option.data.data.project.work_package_number\r\n    })\r\n    // formCreateEVMS.setValues(project,option.value)\r\n\r\n    // formCreateEVMS.setFieldValue('planned_hours', option.data.data.project.planned_hours)\r\n    // formCreateEVMS.setFieldValue('planned_value', option.data.data.project.planned_value)\r\n    // formCreateEVMS.setFieldValue('work_package_number', option.data.data.project.work_package_number)\r\n\r\n    // setSelectedProjectEndDate(option.planned_delivery_date)\r\n  }\r\n\r\n  const reset_form = () => {\r\n    formCreateEVMS.resetForm()\r\n    setProjectValue(null);\r\n\r\n\r\n  }\r\n  {/**validation stuff */ }\r\n  const validate_evms_form = (values) => {\r\n    console.log('validating values', values)\r\n    const errors = {}\r\n    if (!values.project) errors.project = \"Project Selection is required\"\r\n    if (!values.earned_value) errors.earned_value = \"Earned Value is required\"\r\n    if (!values.actual_cost) errors.actual_cost = \"Actual Cost is required\"\r\n    if (!values.estimate_at_completion) errors.estimate_at_completion = \"Estimate at completion is required\"\r\n    if (!values.estimate_to_completion) errors.estimate_to_completion = \"Estimate to completion is required\"\r\n    if (!values.planned_value) errors.planned_value = \"Planned Value is required\"\r\n    if (!values.planned_hours) errors.planned_hours = \"Planned hours is required\"\r\n    if(!values.variance_at_completion)errors.variance_at_completion=\"Variance at completion is required\"\r\n    if (!values.budget_at_completion) errors.budget_at_completion = \"Budget at completion is required\"\r\n    return errors\r\n  }\r\n  const create_evms = async () => {\r\n    console.log('values', JSON.stringify(formCreateEVMS.values))\r\n    API.post('evms/create/', formCreateEVMS.values).then((res) => {\r\n      console.log(res)\r\n      if (res.status == 200 && res.data.success == 'True') {\r\n        reset_form()\r\n        swal('Successfully Created!', '', 'success')\r\n      }\r\n      else {\r\n        console.log(\"error\", res)\r\n        swal('Problem occured during creating EVMS!', '', 'warning');\r\n      }\r\n    })\r\n  }\r\n  const formCreateEVMS = useFormik({\r\n    initialValues: {\r\n      project: \"\",\r\n      work_package_number: \"\",\r\n      earned_value: \"\",\r\n      actual_cost: \"\",\r\n      estimate_at_completion: \"\",\r\n      estimate_to_completion: \"\",\r\n      planned_value: \"\",\r\n      planned_hours: \"\",\r\n      variance_at_completion: \"\",\r\n      budget_at_completion: \"\"\r\n\r\n    },\r\n\r\n    validateOnChange: true,\r\n    validateOnBlur: true,\r\n    validate: validate_evms_form,\r\n    onSubmit: create_evms\r\n  })\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      create_evms(formCreateEVMS.values)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <CContainer>\r\n\r\n        <CRow>\r\n          { (uniqueArray.length !=0 || evmsList.length == 0) ?(\r\n          <div className=\"col-lg-10 offset-lg-1 col-md-12\">\r\n            <CCard className=\"custom-project-card-1\">\r\n              <CCardHeader className=\"project-header-3\">\r\n                {\" \"}\r\n                <h4 className=\"section-name-projectcreate\">Create EVMS</h4>\r\n              </CCardHeader>\r\n              <CContainer>\r\n                <CForm className=\"mt-3\">\r\n                  <CRow>\r\n                    {/**Project Name */}\r\n                    <div className=\"col-lg-12 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"projectName\">\r\n                        Project *\r\n                      </CLabel>\r\n                      <Select\r\n                        closeMenuOnSelect={true}\r\n                        aria-labelledby=\"projectName\"\r\n                        id=\"projectName\"\r\n                        // getOptionLabel={option => option.task_delivery_order.title + \" / \" + option.sub_task}\r\n                        // getOptionValue={option => option.id}\r\n                        placeholder=\"Select a project\"\r\n                        isClearable={false}\r\n                        isMulti={false}\r\n\r\n                        // onChange={(value) => handleChange(\"projects\", value)}\r\n                        onChange={getAssigneeList}\r\n                        classNamePrefix=\"custom-forminput-6\"\r\n\r\n                        options={uniqueArray}\r\n                        styles={colourStyles}\r\n                      />\r\n                      {/**View related TDO details */}\r\n                      {projectValue != undefined ?\r\n                        (<div className=\"mt-1\">\r\n                          <CAlert color=\"primary\">\r\n                            <small>\r\n                              <b>Work Package Number:</b> {projectValue.data.data.project.work_package_number}\r\n                              <br />\r\n                              <b>Estimated Persons: </b> {projectValue.data.data.project.estimated_person}\r\n                              <br />\r\n                              <b>Planned Delivery Date: </b> {projectValue.data.data.project.planned_delivery_date}\r\n                              <br />\r\n                              {/* <b>Assignee(s):</b><span> </span> */}\r\n\r\n\r\n                            </small>\r\n                          </CAlert>\r\n                        </div>\r\n                        ) :\r\n                        null}\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.project && <p className=\"error\">{formCreateEVMS.errors.project}</p>}\r\n                    </div>\r\n                    {/**Work package */}\r\n                 \r\n                    {/**Earned Value */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"earned_value\">\r\n                        Earned Value *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"earned_value\" id=\"earned_value\" type=\"number\" min=\"0.00\" step=\"0.01\" value={formCreateEVMS.values.earned_value} onChange={formCreateEVMS.handleChange} required>\r\n\r\n                      </CInput>\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.earned_value && <p className=\"error\">{formCreateEVMS.errors.earned_value}</p>}\r\n                    </div>\r\n                    {/**Actual Cost */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"actual_cost\">\r\n                        Actual Cost  *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"actual_cost\" id=\"actual_cost\" type=\"number\" min=\"0\" step=\"0.1\" value={formCreateEVMS.values.actual_cost} onChange={formCreateEVMS.handleChange} required />\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.actual_cost && <p className=\"error\">{formCreateEVMS.errors.actual_cost}</p>}\r\n                    </div>\r\n                    {/**estimate at completion */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"estimate_at_completion\">\r\n                        Estimate at completion *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"estimate_at_completion\" id=\"estimate_at_completion\" type=\"number\" min=\"0\" step=\"0.1\" value={formCreateEVMS.values.estimate_at_completion} \r\n                        onChange={formCreateEVMS.handleChange} required />\r\n                      {/**error show */}\r\n                      {formCreateEVMS.errors.estimate_at_completion && <p className=\"error\">{formCreateEVMS.errors.estimate_at_completion}</p>}\r\n                    </div>\r\n                    {/**estimate to completion */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"estimate_to_completion\">\r\n                        Estimate to completion *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"estimate_to_completion\" id=\"estimate_to_completion\" type=\"number\" min=\"0\" step=\"0.1\" value={formCreateEVMS.values.estimate_to_completion} onChange={formCreateEVMS.handleChange} required />\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.estimate_to_completion && <p className=\"error\">{formCreateEVMS.errors.estimate_to_completion}</p>}\r\n                    </div>\r\n                    {/**Planned Value */}\r\n\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"planned_value\">\r\n                        Planned Value\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"planned_value\" id=\"planned_value\" type=\"number\" min=\"0\" value={formCreateEVMS.values.planned_value} onChange={formCreateEVMS.handleChange} readOnly />\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.planned_value && <p className=\"error\">{formCreateEVMS.errors.planned_value}</p>}\r\n                    </div>\r\n                    {/**Planned hours */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"planned_hours\">\r\n                        Planned Hours\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"planned_hours\" id=\"planned_hours\" type=\"number\" min=\"1\" value={formCreateEVMS.values.planned_hours} onChange={formCreateEVMS.handleChange} readOnly />\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.planned_hours && <p className=\"error\">{formCreateEVMS.errors.planned_hours}</p>}\r\n                    </div>\r\n                    {/**variance at completion */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"variance_at_completion\">\r\n                        Variance at completion *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"variance_at_completion\" id=\"variance_at_completion\" type=\"number\" min=\"0\" value={Math.abs(formCreateEVMS.values.budget_at_completion - formCreateEVMS.values.estimate_at_completion)} onChange={formCreateEVMS.handleChange} readOnly />\r\n                      {/**Error show */}\r\n                    </div>\r\n                    {/**budget at completion */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"budget_at_completion\">\r\n                        Budget at completion *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"budget_at_completion\" id=\"budget_at_completion\" type=\"number\" min=\"0\" step=\"0.1\" value={formCreateEVMS.values.budget_at_completion} onChange={(e) => {formCreateEVMS.setFieldValue('budget_at_completion', e.target.value); formCreateEVMS.setFieldValue('variance_at_completion', Math.abs(formCreateEVMS.values.budget_at_completion - formCreateEVMS.values.estimate_at_completion))}} required />\r\n\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.budget_at_completion && <p className=\"error\">{formCreateEVMS.errors.budget_at_completion}</p>}\r\n                    </div>\r\n                    {/**submit buttons */}\r\n                    <div className=\"col-md-12\">\r\n                      <div className=\"project-form-button-holders mt-3\">\r\n                        <CButton className=\"create-btn-prjct create-prjct\" onClick={formCreateEVMS.handleSubmit} >Create EVMS</CButton>\r\n                        <CButton className=\"create-btn-prjct cancel-prjct\" onClick={reset_form}>Cancel</CButton>\r\n                      </div>\r\n                    </div>\r\n\r\n                  </CRow>\r\n                </CForm>\r\n              </CContainer>\r\n            </CCard>\r\n          </div>\r\n          ):null}\r\n          {/**if there are no evms to create */}\r\n          {(uniqueArray.length == 0 && evmsList.length != 0)?( <div className=\"col-lg-10 offset-lg-1 col-md-12\">\r\n          <CAlert className=\"no-value-show-alert text-center\" color=\"primary\">All existing projects' EVMS has been created.\r\n                        <div><CButton className=\"evms-from-create\" variant=\"ghost\" onClick={() => history.push({ pathname: '/dashboard/EVMS/view' })}>View Details</CButton> of already existing EVMS's</div>\r\n                       </CAlert>\r\n          </div>\r\n          ):null}\r\n\r\n        </CRow>\r\n      </CContainer>\r\n    </>\r\n  );\r\n};\r\nexport default ProjectEVMS;\r\n"],"sourceRoot":""}